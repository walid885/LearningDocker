this is for notes taken through the journey of learning Docker : 
-> docker is used in order to resolve the problem 

=> docker : centralized platform for packaging , deploying and running applications. 
=> develop containers , and can be deployed anywhere 
docker is composed by : Client , server , machine , hub , compose 
=> docker container is a lightweight alternatives of the virtual machie. => ship the whole app as a single package
===> eliminating machine problmes
// computing density 
==> gerat platform for development 
There are the following advantages of Docker -

It runs the container in seconds instead of minutes.
It uses less memory.
It provides lightweight virtualization.
It does not a require full operating system to run applications.
It uses application dependencies to reduce the risk.
Docker allows you to use a remote repository to share your container with others.
It provides continuous deployment and testing environment.
================================DISADVENTEGES======================================================
It increases complexity due to an additional layer.
In Docker, it is difficult to manage large amount of containers.
Some features such as container self -registration, containers self-inspects, copying files form host to the container, and more are missing in the Docker.
Docker is not a good solution for applications that require rich graphical interface.
Docker provides cross-platform compatibility means if an application is designed to run in a Docker container on Windows, then it can't run on Linux or vice versa.


=============== docker Engine ====================
 */A server which is a type of long-running program called a daemon process.
*/The REST API is used to specify interfaces that programs can use to talk to the daemon and instruct it what to do.
*/A command line interface client.
=============== docker Features ======================
==> easy and fast config
=> Increase productiv
=> APP ISOLATION
SWARM ? => ( what is this ?)
Routing Mesh 
SErvecies 
Security management 

///* swarm It is a clustering and scheduling tool for Docker containers. Swarm uses the Docker API as its front end, which helps us to use various tools to control it. It also helps us to control 
the host 

===================Docker Architecture ==================== 

        => client     |
Docker  => Host       | => for a great illustrations , you can follow this link : https://www.javatpoint.com/docker-architecture
        => Registry   |
 
====================> Docker Client <====================
Docker client uses REST API ( I need to do a project on rest api using docker , in order to grasp the concept )
==> docker client uses {commands + rest API }to connect with the docker daemon ( the server ) 
==> the terminal sends docker commands to the deamon , the daemon , receives theses commands , in the form of rest api

    |=> docker build    
CLI |=> docker pull 
    |=> docker run


====================> Docker Host  <====================
provide the environment and execute and run applications , docker daemon + images + containers + networks + storage
====================> Docker Registry  <====================

    =>public Registry (docker hub)
Reg 
    => private Registry

====================> Docker Objects  <====================

        => Images : read only binary templates, ( private container registry to share container images within the enterprise , // public container to share container images with the world)
Docker  => Container strectural units that are used to hold the entire package that is needed to run the application  
        =>docker networking : =>bridge( default network driver) , host( used when we don't need for network isolation )  , none , overlay( swarm services to communicate with each others => run diff docker host  ) , macvlan ( MAC ADDRESSES TO CONTAINERS )
        =>


====================> Docker Storage  <====================
            => data Volume , create persistance storage , name volumes 
storage :  => Directory mounts , mounts host directory into a container 
            =>  connect to external storage platforms 